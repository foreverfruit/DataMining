1.输出：输出该连接的类别，并统计算法准确率
 - normal：正常
 - 22种训练集中的攻击
 - other：表示17种只在测试集出现，未在训练集出现的数据

2.问题一：存在一些类标号，只出现在测试集，不出现在训练集，这个问题如何解决？

-------------------------------------------------
方案一：简化问题，屏蔽攻击类别差异，只检测是攻击还是非攻击，不明确区分是哪种攻击。
可能存在问题：距离测量的时候，A类攻击到B类攻击的距离可能大于A类攻击到非攻击类Y的距离，也就是说所有攻击类看做
一个类X，非攻击看做一个类Y，那么可能存在一个攻击实体a，它到X的距离是大于到Y的距离的，会被误判为Y类。

-------------------------------------------------
流程：
1.预处理，采用10per训练集的统计数据，对属性映射，类标号只标注0（非攻击）和1（攻击）
2.用scikit-learn，以10per训练集和测试集做KNN，查看准确率
3.通过step2证明可行性，然后用full训练集做统计，预处理数据，并归一化
4.实现基于距离的分类预测

step1和2是粗糙证明可行性：
    未归一化，直接float映射str后knn无脑预测，时间：半小时，数据量，训练50w，测试30w，准确率0.92
    证明二分类距离算法可行

step3和4是最终的实现方案

--------------------------------------------------
根据10percent统计的symbol属性的各值的映射值
dict_protocal {'icmp': 0.0045415758704099411, 'tcp': 0.40414068871175651, 'udp': 0.94217352854475778}
dict_service {'IRC': 0.97674418604651159, 'X11': 0.81818181818181823, 'Z39_50': 0.0, 'auth': 0.67073170731707321, 'bgp': 0.0, 'courier': 0.0, 'csnet_ns': 0.0, 'ctf': 0.0, 'daytime': 0.0, 'discard': 0.0, 'domain': 0.025862068965517241, 'domain_u': 0.99982943885382913, 'echo': 0.0, 'eco_i': 0.23690621193666261, 'ecr_i': 0.0012260127931769723, 'efs': 0.0, 'exec': 0.0, 'finger': 0.69850746268656716, 'ftp': 0.46741854636591479, 'ftp_data': 0.80449057403092561, 'gopher': 0.0, 'hostnames': 0.0, 'http': 0.96256202074875963, 'http_443': 0.0, 'imap4': 0.0, 'iso_tsap': 0.0, 'klogin': 0.0, 'kshell': 0.0, 'ldap': 0.0, 'link': 0.0, 'login': 0.0, 'mtp': 0.0, 'name': 0.0, 'netbios_dgm': 0.0, 'netbios_ns': 0.0, 'netbios_ssn': 0.0, 'netstat': 0.0, 'nnsp': 0.0, 'nntp': 0.0, 'ntp_u': 1.0, 'other': 0.77822302058864168, 'pm_dump': 0.0, 'pop_2': 0.0, 'pop_3': 0.3910891089108911, 'printer': 0.0, 'private': 0.066424391079689435, 'red_i': 1.0, 'remote_job': 0.0, 'rje': 0.0, 'shell': 0.0089285714285714281, 'smtp': 0.98714388563200661, 'sql_net': 0.0, 'ssh': 0.0095238095238095247, 'sunrpc': 0.0, 'supdup': 0.0, 'systat': 0.0, 'telnet': 0.42690058479532161, 'tftp_u': 1.0, 'tim_i': 0.2857142857142857, 'time': 0.33121019108280253, 'urh_i': 1.0, 'urp_i': 0.9981412639405205, 'uucp': 0.0, 'uucp_path': 0.0, 'vmnet': 0.0, 'whois': 0.0}
dict_flag {'OTH': 0.125, 'REJ': 0.19873488372093023, 'RSTO': 0.1157167530224525, 'RSTOS0': 0.0, 'RSTR': 0.034330011074197121, 'S0': 0.00058615973427425376, 'S1': 0.94736842105263153, 'S2': 0.70833333333333337, 'S3': 0.69999999999999996, 'SF': 0.24233431983934045, 'SH': 0.0}

各属性取值范围：
第0个属性： before： 0.0 58329.0 after: 0.0 1.0
第4个属性： before： 0.0 693375640.0 after: 0.0 1.0
第5个属性： before： 0.0 5155468.0 after: 0.0 1.0
第6个属性： before： 0.0 1.0 after: 0.0 1.0
第7个属性： before： 0.0 3.0 after: 0.0 1.0
第8个属性： before： 0.0 3.0 after: 0.0 1.0
第9个属性： before： 0.0 30.0 after: 0.0 1.0
第10个属性： before： 0.0 5.0 after: 0.0 1.0
第11个属性： before： 0.0 1.0 after: 0.0 1.0
第12个属性： before： 0.0 884.0 after: 0.0 1.0
第13个属性： before： 0.0 1.0 after: 0.0 1.0
第14个属性： before： 0.0 2.0 after: 0.0 1.0
第15个属性： before： 0.0 993.0 after: 0.0 1.0
第16个属性： before： 0.0 28.0 after: 0.0 1.0
第17个属性： before： 0.0 2.0 after: 0.0 1.0
第18个属性： before： 0.0 8.0 after: 0.0 1.0
第19个属性： before： 0.0 0.0 after: 0.0 0.0
第20个属性： before： 0.0 0.0 after: 0.0 0.0
第21个属性： before： 0.0 1.0 after: 0.0 1.0
第22个属性： before： 0.0 511.0 after: 0.0 1.0
第23个属性： before： 0.0 511.0 after: 0.0 1.0
第24个属性： before： 0.0 1.0 after: 0.0 1.0
第25个属性： before： 0.0 1.0 after: 0.0 1.0
第26个属性： before： 0.0 1.0 after: 0.0 1.0
第27个属性： before： 0.0 1.0 after: 0.0 1.0
第28个属性： before： 0.0 1.0 after: 0.0 1.0
第29个属性： before： 0.0 1.0 after: 0.0 1.0
第30个属性： before： 0.0 1.0 after: 0.0 1.0
第31个属性： before： 0.0 255.0 after: 0.0 1.0
第32个属性： before： 0.0 255.0 after: 0.0 1.0
第33个属性： before： 0.0 1.0 after: 0.0 1.0
第34个属性： before： 0.0 1.0 after: 0.0 1.0
第35个属性： before： 0.0 1.0 after: 0.0 1.0
第36个属性： before： 0.0 1.0 after: 0.0 1.0
第37个属性： before： 0.0 1.0 after: 0.0 1.0
第38个属性： before： 0.0 1.0 after: 0.0 1.0
第39个属性： before： 0.0 1.0 after: 0.0 1.0
第40个属性： before： 0.0 1.0 after: 0.0 1.0
结果：{0: [0.0, 58329.0], 1: [0.0045415758704099411, 0.94217352854475778], 2: [0.0, 1.0], 3: [0.0, 0.94736842105263153], 4: [0.0, 693375640.0], 5: [0.0, 5155468.0], 6: [0.0, 1.0], 7: [0.0, 3.0], 8: [0.0, 3.0], 9: [0.0, 30.0], 10: [0.0, 5.0], 11: [0.0, 1.0], 12: [0.0, 884.0], 13: [0.0, 1.0], 14: [0.0, 2.0], 15: [0.0, 993.0], 16: [0.0, 28.0], 17: [0.0, 2.0], 18: [0.0, 8.0], 19: [0.0, 0.0], 20: [0.0, 0.0], 21: [0.0, 1.0], 22: [0.0, 511.0], 23: [0.0, 511.0], 24: [0.0, 1.0], 25: [0.0, 1.0], 26: [0.0, 1.0], 27: [0.0, 1.0], 28: [0.0, 1.0], 29: [0.0, 1.0], 30: [0.0, 1.0], 31: [0.0, 255.0], 32: [0.0, 255.0], 33: [0.0, 1.0], 34: [0.0, 1.0], 35: [0.0, 1.0], 36: [0.0, 1.0], 37: [0.0, 1.0], 38: [0.0, 1.0], 39: [0.0, 1.0], 40: [0.0, 1.0]}


scikit-learn knn without normalization
result: 0.9246597584148102 287596

my classify:
训练集a类占比: 0.19691065764410826
测试集a类占比: 0.31276183249793427
测试总数： 311029 失败率： 0.0 准确率: 0.9214639149404075

---------------------------------------------------------
总结：
1.如前文所说，模型存在明显漏洞，误判原因。
2.由于内存溢出问题，未用700M的500w条的原训练集做统计，仅使用了10percent的训练集统计
3.只能做二分判断，是否是攻击连接，无法做到精度是哪一类攻击的判断，即无法多类型分类

注：
更换训练集的时候，仅需要，依次执行get_str_dict()和preprocess_prior()两个方法，通过统计得出相应的映射字典即可
后续处理调用preprocess()预处理,my_classify()分类即可
**理论上，更换更大的训练集会有更好的统计结果，可能会提高准确率，未做测试！**
